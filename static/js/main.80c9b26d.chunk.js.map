{"version":3,"sources":["components/calcualtor/Calculator.js","components/calcualtor/screen/Screen.js","components/calcualtor/keyboard/keys/Keys.js","components/calcualtor/keyboard/Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","pressed","setPressed","result","setResult","handleOnClick","stroke","res","Math","round","eval","toString","className","Screen","props","Keys","styl","ky","length","onClick","Keyboard","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6zBAKA,SAASA,aAAa,IAAD,UACaC,oDAAS,IADtB,0MACVC,QADU,cACDC,WADC,yBAESF,oDAAS,GAFlB,2MAEVG,OAFU,cAEFC,UAFE,cAIXC,cAAc,SAAdA,cAAeC,QACjB,GAAY,UAATA,OAGC,OAFAJ,WAAW,SACXE,UAAU,GAGd,GAAY,MAATE,OAAa,CAEb,IAAIC,IAAIC,KAAKC,MAAoB,IAAdC,KAAKT,UAAiB,IAGzC,OAFAG,UAAUG,UACVL,WAAWK,IAAII,YAGlBT,WAAWD,QAAQK,SAEvB,OACI,kEAAKM,UAAU,cACX,8FAA0B,sEAA1B,2BAED,2DAAC,8CAAD,CACIX,QAASA,QACTE,OAAQA,SAEX,2DAAC,kDAAD,CACIE,cAAeA,iBAOhBN,kC,6BCxCf,0BAUec,IAPf,SAAgBC,GACZ,OAAO,yBAAKF,UAAU,UAClB,6BAAME,EAAMb,SACZ,6BAAMa,EAAMX,W,uDCkBLY,MArBf,SAAcD,GACV,IAAIE,EAAK,GAWT,OARQA,EAFc,IAAlBF,EAAMG,GAAGC,OACK,MAAXJ,EAAMG,IAAuB,MAAXH,EAAMG,GAClB,OAEA,OAGJ,OAIL,6BACA,4BAAQL,UAAWI,EAAMG,QAAS,kBAAML,EAAMT,cAAcS,EAAMG,MAC7DH,EAAMG,M,MCGJG,IAhBf,SAAkBN,GAGd,OACI,yBAAKF,UAAU,YAHR,CAAC,QAAS,IAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAI5DS,KAAI,SAACJ,EAAIK,GAAL,OACN,kBAAC,EAAD,CACIC,IAAKD,EACLL,GAAIA,EACJZ,cAAeS,EAAMT,sB,8OCD9BmB,MARf,WACE,OACE,yBAAKZ,UAAU,OACf,kBAACb,EAAA,EAAD,QCIgB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80c9b26d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport Keyboard from \"./keyboard/Keyboard\";\r\nimport Screen from \"./screen/Screen\";\r\nimport \"./Calculator.css\";\r\n \r\nfunction Calculator(){\r\n    const [pressed, setPressed] = useState(\"\");\r\n    const [result, setResult]=useState(0);\r\n    \r\n    const handleOnClick=(stroke)=>{\r\n        if(stroke===\"clear\"){\r\n            setPressed(\"\");\r\n            setResult(0);\r\n            return;\r\n        }\r\n        if(stroke===\"=\"){\r\n            // eslint-disable-next-line\r\n           let res=Math.round(eval(pressed)*100000)/100000;\r\n           setResult(res);\r\n           setPressed(res.toString());\r\n           return;\r\n        }\r\n        setPressed(pressed+stroke);\r\n    }\r\n    return(\r\n        <div className=\"calculator\">\r\n            <div>Solar cells are here!<br/>\r\n            (cba to draw them, tho)</div>\r\n           <Screen\r\n               pressed={pressed}\r\n               result={result}\r\n           />\r\n            <Keyboard\r\n                handleOnClick={handleOnClick}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Calculator;","import React from \"react\";\r\nimport \"./Screen.css\";\r\n\r\nfunction Screen(props){\r\n    return <div className=\"screen\">\r\n        <div>{props.pressed}</div>\r\n        <div>{props.result}</div>\r\n    </div>\r\n}\r\n\r\nexport default Screen;","import React from 'react';\r\nimport \"./Keys.css\";\r\n\r\nfunction Keys(props){\r\n    let styl=\"\";\r\n    if (props.ky.length===1){\r\n        if(props.ky===\"0\" || props.ky===\"=\"){\r\n            styl=\"l l2\";\r\n        }else {\r\n            styl=\"l l1\";\r\n        }\r\n    }else {\r\n        styl=\"l l3\";\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <button className={styl} onClick={() => props.handleOnClick(props.ky)}>\r\n            {props.ky}\r\n        </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keys;","import React from \"react\"\r\nimport Keys from './keys/Keys';\r\nimport \"./Keyboard.css\";\r\n\r\n\r\nfunction Keyboard(props){\r\n    const keys=[\"clear\", \"/\", \"7\",\"8\",\"9\",\"*\",\"4\",\"5\",\"6\",\"+\",\"1\",\"2\",\"3\",\"-\",\"0\",\"=\"];\r\n    \r\n    return (\r\n        <div className=\"keyboard\">\r\n                {keys.map((ky, index)=>(\r\n                    <Keys \r\n                        key={index}\r\n                        ky={ky}\r\n                        handleOnClick={props.handleOnClick}\r\n                    />\r\n                ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keyboard;","import React from 'react';\nimport Calculator from \"./components/calcualtor/Calculator\";\nimport \"./App.css\";\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}